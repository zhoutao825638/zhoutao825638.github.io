<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>/Users/tao/Documents/Gridea/output</id>
    <title>Gridea</title>
    <updated>2019-07-18T11:24:46.952Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="/Users/tao/Documents/Gridea/output"/>
    <link rel="self" href="/Users/tao/Documents/Gridea/output/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>/Users/tao/Documents/Gridea/output/images/avatar.png</logo>
    <icon>/Users/tao/Documents/Gridea/output/favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[1111]]></title>
        <id>/Users/tao/Documents/Gridea/output/post/1111/index.html</id>
        <link href="/Users/tao/Documents/Gridea/output/post/1111/index.html">
        </link>
        <updated>2019-07-18T11:24:29.000Z</updated>
        <content type="html"><![CDATA[<p>ByteBuf 实现了ReferenceCounted 接口，实现了引用计数接口，该接口的retain(int) 方法为了保证线程安全使用了自旋锁来确保操作安全，那么选择了比较重要的实现类<code>AbstractReferenceCountedByteBuf</code> 来查看这一特性.</p>
<p>在JDK 1.5 之后，JDK的并发包提供了Atomic* 的相关类，来帮助开发者更好的完成并发操作，这里我们学习使用CAS来实现线程安全，CAS就是ComposeAndSet,中文含义，比较And更新,我们来看一个例子,具体的说明在注释中！</p>
<pre><code class="language-java">static class Increment {

    // volatile 保证了线程可见性，但是没有保证按成安全性
    private volatile int i;

    // 声明CAS的抽象类
    private static AtomicIntegerFieldUpdater&lt;Increment&gt; updater;

    static {
      // 通过静态方法创建CAS的具体实例
      // 第一个参数表示维护的Integer所在的类的class
      // 第二个参数表示维护的Integer变量的名称
      updater = AtomicIntegerFieldUpdater.newUpdater(Increment.class, &quot;i&quot;);
    }

    /**
     * 构造初始化函数
     *
     * @param i
     */
    public Increment(int i) {
      this.i = i;
    }

    /** 自增一个 */
    public void increment() {
      increment(1);
    }

    /**
     * 重载自增方法
     *
     * &lt;p&gt;该方法具体实现了CAS的代码逻辑，重在均在下面的for循环中
     *
     * @param increment
     */
    public void increment(int increment) {
      // 创建一个死循环，compareAndSet检查不通过的时候，重新获取新的值尝试更新
      for (; ; ) {
        // 保存当前线程更新的值的状态
        int oldI = this.i;
        final int newValue = oldI + increment;
        // 校验值是否更新完成
        if (newValue &lt;= increment) {
          throw new IllegalArgumentException(&quot;非法的参数异常&quot;);
        }
        // 如果CAS更新完成，则退出循环，否则打印重试日志
        if (updater.compareAndSet(this, oldI, newValue)) {
          break;
        }
        System.out.println(&quot;发生多线程并发,CAS正常重新尝试&quot;);
      }
    }
  }
</code></pre>
<p>实现了自增的CAS代码之后，我们创建一个MyRunnable 继承Runnable 在run() 方法中实现Increment 实例的自增，具体代码如下:</p>
<pre><code class="language-java">  static class MyRunnable implements Runnable {

    private Increment increment;
    
    public MyRunnable(Increment increment) {
      this.increment = increment;
    }

    @Override
    public void run() {
      increment.increment();
    }
  }

</code></pre>
<p>在main() 方法中我们创建一个Increment 示例对象，构造参数传1，然后创建50个线程，同时启动，观察最终的结果, 多次运行观察是否能实现线程安全.</p>
<pre><code class="language-java">  public static void main(String[] args) throws InterruptedException {
    Increment increment = new Increment(1);
    for (int i = 0; i &lt; 50; i++) {
      new Thread(new MyRunnable(increment)).start();
    }
    // 延时4s, 等待所有线程执完成后，输出i
    TimeUnit.SECONDS.sleep(4);
    System.out.println(increment.i);
  }
</code></pre>
<p>最后输出结果为51，可见CAS 能够实现多线程安全的问题，相对于RelockCount和重量级的synchronized 各有各的适合场景，下面回到Netty的自旋锁的问题上来，可以看到下面的代码和上面的示例是类似的，Netty依靠这个方法来完成ByteBuf的引用计数，确保多线程操作ByteBuf的时候引用计数不会出现多线程的问题,</p>
<blockquote>
<p>下面的代码是引用了Netty5 的 io.netty.buffer.AbstractReferenceCountedByteBuf 类的部分代码，有兴趣的朋友可以下载该框架的源码，找到该文件看一下。</p>
</blockquote>
<pre><code class="language-java">    private static final AtomicIntegerFieldUpdater&lt;AbstractReferenceCountedByteBuf&gt; refCntUpdater;
    static {
        AtomicIntegerFieldUpdater&lt;AbstractReferenceCountedByteBuf&gt; updater =
                PlatformDependent.newAtomicIntegerFieldUpdater(AbstractReferenceCountedByteBuf.class, &quot;refCnt&quot;);
        if (updater == null) {
            updater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, &quot;refCnt&quot;);
        }
        refCntUpdater = updater;
    }

    @Override
    public ByteBuf retain(int increment) {
        if (increment &lt;= 0) {
            throw new IllegalArgumentException(&quot;increment: &quot; + increment + &quot; (expected: &gt; 0)&quot;);
        }
        for (;;) {
            int refCnt = this.refCnt;
            if (refCnt == 0) {
                throw new IllegalReferenceCountException(0, increment);
            }
            if (refCnt &gt; Integer.MAX_VALUE - increment) {
                throw new IllegalReferenceCountException(refCnt, increment);
            }
            if (refCntUpdater.compareAndSet(this, refCnt, refCnt + increment)) {
                break;
            }
        }
        return this;
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>/Users/tao/Documents/Gridea/output/post/hello-gridea/index.html</id>
        <link href="/Users/tao/Documents/Gridea/output/post/hello-gridea/index.html">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>